package com.example.restservice.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;
import com.example.restservice.services.*;
import com.example.restservice.dtos.*;

@RestController
public class ColumnController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private ColumnService columnService;
	@Autowired
	private TeamService teamService;
	@Autowired
	private UserService userService;

	@GetMapping("/column")
	public Page<ColumnForList> column(@RequestParam(value = "page", defaultValue = "0") int page,
			@RequestParam(value = "itemsPerPage", defaultValue = "0") int itemsPerPage) {
		if (itemsPerPage == 0)
			itemsPerPage = 10;
		var paginator = PageRequest.of(page, itemsPerPage, Sort.by("id").ascending());

		return columnService.findAllForList(paginator);
	}

	@GetMapping("/column/{columnId}")
	public ColumnForList getSingleColumn(@PathVariable(value = "columnId") Long id) throws Exception {
		var result = columnService.findById(id);
		if (result == null) {
			throw new ResponseStatusException(HttpStatus.NOT_FOUND, "CHECK YOUR REQUEST!\n");
		}
		return result;
	}

	@PostMapping(path = "/column") // Map ONLY POST Requests
	public Column createColumn(@RequestBody Column column) {
		if (!column.isValid()) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "CHECK YOUR REQUEST!\n");
		}

		return columnService.saveColumn(column);

	}

	@DeleteMapping("/column/{columnId}")
	@ResponseStatus(code = HttpStatus.NO_CONTENT, reason = "OK")
	public void deleteItem(@PathVariable(value = "columnId") Long id) {
		columnService.deleteById(id);
	}

	@PutMapping(path = "/column/{columnId}") // Map ONLY POST Requests
	public ColumnForList updateColumn(Authentication authentication, @PathVariable(value = "columnId") Long columnId,
			@RequestBody Column column) throws Exception {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		if (!column.isValid() || column.getId() != columnId) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST);
		}

		var loggedinUser = userService.getByUsername(authentication.getName());
		boolean isInTeam = userService.isMemberOfTeam(loggedinUser.getId(),
				columnService.findById(columnId).getTeam().getId());

		// boolean isInTeam =
		// teamService.findById(columnId).getUsers().stream().mapToLong(u -> u.getId())
		// .anyMatch(l -> l == loggedinUser.getId());

		if (!isInTeam) {
			throw new ResponseStatusException(HttpStatus.UNAUTHORIZED);
		}

		try {
			return columnService.updateColumn(columnId, column);
		} catch (Exception e) {
			throw new ResponseStatusException(HttpStatus.NOT_FOUND, e.getMessage(), e);
		}
	}

}
