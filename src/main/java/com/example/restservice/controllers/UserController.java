package com.example.restservice.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;
import com.example.restservice.services.EmailSenderService;
import com.example.restservice.services.UserService;
import com.example.restservice.dtos.User;

@RestController
public class UserController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private UserService userService;

	@Autowired
	private EmailSenderService emailSender;

	@GetMapping("/user")
	public Page<User> user(@RequestParam(value = "page", defaultValue = "0") int page,
			@RequestParam(value = "userPerPage", defaultValue = "0") int userPerPage) {
		if (userPerPage == 0)
			userPerPage = 10;
		var paginator = PageRequest.of(page, userPerPage, Sort.by("id").ascending());

		return userService.findAll(paginator);
	}

	@GetMapping("/user/{userId}")
	public ResponseEntity<User> getSingleItem(@PathVariable(value = "userId") Long id) {
		try {
			return ResponseEntity.ok(userService.findById(id));
		} catch (Exception e) {
			throw new ResponseStatusException(HttpStatus.NOT_FOUND);
		}
	}

	@DeleteMapping("/user/{userId}")
	@ResponseStatus(code = HttpStatus.NO_CONTENT, reason = "OK")
	public void deleteUser(@PathVariable(value = "userId") Long id) {
		userService.deleteById(id);
	}

	@PostMapping("/user")
	public ResponseEntity<User> createUser(@RequestBody User user) {
		if (user.getUsername() == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST);
		}
		User savedUser = userService.saveUser(user);
		emailSender.sendSimpleEmail(savedUser.getMail(), "Welcome to our application", "Thank you for joining us!");
		return ResponseEntity.status(HttpStatus.CREATED).body(savedUser);
	}

	@PutMapping(path = "/user/{userId}") // Map ONLY POST Requests
	public ResponseEntity<User> updateUser(Authentication authentication, @PathVariable(value = "userId") Long id,
			@RequestBody User user) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		var loggedinUser = userService.getByUsername(authentication.getName());

		if (loggedinUser.getId() != id) {
			throw new ResponseStatusException(HttpStatus.UNAUTHORIZED);
		}

		if (!user.isValid()) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST);
		}

		try {

			return ResponseEntity.status(HttpStatus.ACCEPTED).body(userService.updateUser(id, user));
		} catch (Exception e) {
			throw new ResponseStatusException(HttpStatus.NOT_FOUND);
		}

	}
}
