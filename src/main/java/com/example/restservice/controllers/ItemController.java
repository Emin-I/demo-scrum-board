package com.example.restservice.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;
import com.example.restservice.services.*;
import com.example.restservice.dtos.*;

@RestController
public class ItemController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private ItemService itemService;
	@Autowired
	private ColumnService columnService;
	@Autowired
	private CommentService commentService;
	@Autowired
	private TeamService teamService;
	@Autowired
	private UserService userService;


	@GetMapping("/item")
	public Page<ItemForList> item(@RequestParam(value = "page", defaultValue = "0") int page,
			@RequestParam(value = "itemsPerPage", defaultValue = "0") int itemsPerPage) {
		if (itemsPerPage == 0)
			itemsPerPage = 10;
		var paginator = PageRequest.of(page, itemsPerPage, Sort.by("id").ascending());

		return itemService.findAllForList(paginator);
	}

	@GetMapping("/item/{itemId}")
	public ItemForList getSingleItem(@PathVariable(value = "itemId") Long id) throws Exception {
		var result = itemService.findById(id);
		if (result == null) {
			throw new ResponseStatusException(HttpStatus.NOT_FOUND, "CHECK YOUR REQUEST");
		}
		return result;
	}
	
	@GetMapping("/item/{itemId}/comments")
	public Page<CommentForList> itemComments(@RequestParam(value = "page", defaultValue = "0") int page,
			@RequestParam(value = "itemsPerPage", defaultValue = "0") int itemsPerPage,
			@PathVariable(value = "commentId") Long itemId) {
		var paginator = PageRequest.of(page, itemsPerPage, Sort.by("id").ascending());
		return commentService.findByItemId(itemId, paginator);
	}

	@DeleteMapping("/item/{itemId}")
	@ResponseStatus(code = HttpStatus.NO_CONTENT, reason = "OK")
	public void deleteItem(@PathVariable(value = "itemId") Long id) {
		itemService.deleteById(id);
	}

	@PostMapping(path = "/item") // Map ONLY POST Requests
	public Item createItem(Authentication authentication, @RequestBody Item item) throws Exception {
		if (!item.isValid()) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST);
		}

		if (item.getColumn() == null) {
			this.setDefaultColumn(item, userService.getByUsername(authentication.getName()));
		}

		if (item.getUser() == null) {
			var loggedinUser = userService.getByUsername(authentication.getName());
			var tmpUserSet = new User();
			tmpUserSet = loggedinUser;
			item.setUser(tmpUserSet);

			return itemService.saveItem(item);
		}
		return itemService.saveItem(item);

	}

	/*
	 * @PutMapping(path = "/item/{itemId}") // Map ONLY POST Requests public Item
	 * updateItem(@PathVariable(value = "itemId") Long id, @RequestBody Item item) {
	 * // @ResponseBody means the returned String is the response, not a view name
	 * // @RequestParam means it is a parameter from the GET or POST request
	 * 
	 * if (!item.isValid()) { throw new
	 * ResponseStatusException(HttpStatus.BAD_REQUEST); }
	 * 
	 * var currentItem = itemService.findById(id).orElseThrow(() -> new
	 * ResponseStatusException(HttpStatus.NOT_FOUND));
	 * 
	 * var columnResult = columnService.findById(item.getColumn().getId());
	 * 
	 * currentItem.setTitle(item.getTitle()); currentItem.setBody(item.getBody());
	 * currentItem.setDueDate(item.getDueDate());
	 * currentItem.setColumn(columnResult.isEmpty() ? null : columnResult.get());
	 * 
	 * ItemRepository.save(currentItem);
	 * 
	 * return currentItem; }
	 */

	private void setDefaultColumn(Item item, User user) throws Exception {
		if (user.getTeams().size() != 1) {
			throw new Exception("Cannot set default column. Specify one.");
		}

		item.setColumn(columnService.findByTeamId(user.getTeams().stream().findFirst().get().getId()).stream()
				.sorted((a, b) -> a.getSequence() < b.getSequence() ? -1 : 1).findFirst().get());
	}

	@PutMapping(path = "/item/{itemId}") // Map ONLY POST Requests
	public ItemForList updateItem(Authentication authentication, @PathVariable(value = "itemId") Long itemId,
			@RequestBody Item item) throws Exception {

		if (!item.isValid() || item.getId() != itemId) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST);
		}


		//boolean isInTeam = teamService.findById(id).getUsers().stream().mapToLong(u -> u.getId())
		//		.anyMatch(l -> l == loggedinUser.getId());

		var loggedinUser = userService.getByUsername(authentication.getName());
		boolean isInTeam = userService.isMemberOfTeam(loggedinUser.getId(), 
				columnService.findById(itemService.findById(itemId).getColumn().getId()).getTeam().getId());
		
		if (!isInTeam) {
			throw new ResponseStatusException(HttpStatus.UNAUTHORIZED);
		}

		try {
			return itemService.updateItem(itemId, item);
		} catch (Exception e) {
			throw new ResponseStatusException(HttpStatus.NOT_FOUND, e.getMessage(), e);
		}

		
		
		
		
		
		
		
		
	}
}
