package com.example.restservice.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;
import com.example.restservice.services.TeamService;
import com.example.restservice.services.UserService;
import com.example.restservice.dtos.*;

import java.util.HashSet;

@RestController
public class TeamController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private UserService userService;
	@Autowired
	private TeamService teamService;
	
	@GetMapping("/team")
	public Page<Team> team(@RequestParam(value = "page", defaultValue = "0") int page,
			@RequestParam(value = "teamsPerPage", defaultValue = "0") int teamsPerPage) {
		if (teamsPerPage == 0)
			teamsPerPage = 10;
		var paginator = PageRequest.of(page, teamsPerPage, Sort.by("id").ascending());

		return teamService.findAll(paginator);
	}

	@GetMapping("/team/{teamId}")
	public Team getSingleTeam(@PathVariable(value = "teamId") Long id) throws Exception {
		var result = teamService.findById(id);
		if (result == null) {
			throw new ResponseStatusException(HttpStatus.NOT_FOUND, "CHECK YOUR REQUEST!\n");
		}
		return result;
	}

	@PostMapping(path = "/team") // Map ONLY POST Requests
	public Team createTeam(Authentication authentication, @RequestBody Team team) {
		if (!team.isValid() || team.getId() != null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "CHECK YOUR REQUEST!\n");
		}
		if (team.getUsers()==null)//.size() == 0 || team.getUsers().equals(null) ) 
				{
			var loggedinUser = userService.getByUsername(authentication.getName());
			
			var userNoTeams = new UserNoTeams();
			userNoTeams.setId(loggedinUser.getId());
			userNoTeams.setUsername(loggedinUser.getUsername());
			
			var tmpUserSet = new HashSet<UserNoTeams>();
			tmpUserSet.add(userNoTeams);
			team.setUsers(tmpUserSet);
			return teamService.saveTeam(team);
		}
		return teamService.saveTeam(team);
	}

	@DeleteMapping("/team/{teamId}")
	@ResponseStatus(code = HttpStatus.NO_CONTENT, reason = "OK")
	public void deleteTeam(@PathVariable(value = "teamId") Long id) throws Exception {
		try {
			teamService.deleteById(id);
		} catch (Exception e) {
			e.printStackTrace();
			throw new ResponseStatusException(HttpStatus.NO_CONTENT, e.getMessage());
		}

	}

	@PutMapping(path = "/team/{teamId}") // Map ONLY POST Requests
	public Team updateTeam(Authentication authentication, @PathVariable(value = "teamId") Long id,
			@RequestBody Team team) throws Exception {

		if (!team.isValid() || team.getId() != id) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST);
		}

		var loggedinUser = userService.getByUsername(authentication.getName());

		boolean isInTeam = teamService.findById(id).getUsers().stream().mapToLong(u -> u.getId())
				.anyMatch(l -> l == loggedinUser.getId());

		if (!isInTeam) {
			throw new ResponseStatusException(HttpStatus.UNAUTHORIZED);
		}

		try {
			return teamService.updateTeam(id, team);
		} catch (Exception e) {
			throw new ResponseStatusException(HttpStatus.NOT_FOUND);
		}

	}

}
